[Display]
ScreenWidth   = 800
ScreenHeight  = 600
Title         = Hexagon Grid Tutorial

[Input]
SetList = MainInput

[MainInput]
KEY_ESCAPE = Quit

[Viewport]
Camera            = Camera
BackgroundColor   = (210, 180, 140)

[Camera]
; We use the same size for the camera than our display on screen so as to obtain a 1:1 ratio
FrustumWidth  = @Display.ScreenWidth
FrustumHeight = @Display.ScreenHeight
FrustumFar    = 1.0
FrustumNear  = 0.0
Position      = (0.0, 0.0, -1.0)

[Object]
Graphic    = OnePixel
Position   = (-400., -300., -0.)
Scale      = (800, 600, 1.)
ShaderList  = Shader

[OnePixel]
Texture = pixel

[Resource]
Texture = ../data/texture

[Shader]
ParamList = radius # highlight
UseCustomParam = true
radius = 50.0
highlight = (0.0, 0.0, 0.0)
Code = "
vec2 cubeToAxial(vec3 cube)
{
    return vec2(cube.x, cube.y);
}

vec3 axialToCube(vec2 axial)
{
    float x = axial.x;
    float y = axial.y;

    float z = -x - y;

    return vec3(x, y, z);
}

vec3 cubeRound(vec3 cube)
{
    int rx = int(round(cube.x));
    int ry = int(round(cube.y));
    int rz = int(round(cube.z));

    float xDiff = abs(rx - cube.x);
    float yDiff = abs(ry - cube.y);
    float zDiff = abs(rz - cube.z);

    if ((xDiff > yDiff) && (xDiff > zDiff))
        rx = -ry - rz;

    else if (yDiff > zDiff)
        ry = -rx - rz;

    else
        rz = -rx - ry;

    return vec3(rx, ry, rz);
}

vec2 axialRound(vec2 axial)
{
    return cubeToAxial(cubeRound(axialToCube(axial)));
}

vec2 pixelToHex_PointyTop(vec2 point)
{
    float size = radius;

    return vec2(((sqrt(3.0)/3.0 * point.x) + (-1.0/3.0 * point.y)) / size, (2.0/3.0 * point.y) / size);
}

vec2 pixelToHex_FlatTop(vec2 point)
{
    float size = radius;

    return vec2((2.0/3.0 * point.x) / size, ((-1.0/3.0 * point.x) + (sqrt(3.0)/3.0 * point.y)) / size);
}

void main()
{
    vec2 point = vec2(gl_FragCoord.x, gl_FragCoord.y);

    vec2 hex = axialRound(pixelToHex_FlatTop(point));

    vec4 color = vec4(1.0, 0.0, 0.0, 1.0);

    if (mod(hex.x, 2.0) > 0.0)
    {
        if (mod(hex.y, 2.0) > 0.0)
            color = vec4(1.0, 0.0, 0.0, 1.0);

        else
            color = vec4(0.0, 1.0, 0.0, 1.0);
    }

    else
    {
        if (mod(hex.y, 2.0) > 0.0)
            color = vec4(0.0, 0.0, 1.0, 1.0);

        else
            color = vec4(1.0, 1.0, 0.0, 1.0);
    }

    if (highlight.xy == hex)
    {
        color = mix(color, vec4(0.0, 0.0, 0.1, 1.0), 0.7);
    }

    gl_FragColor = color;
}
"
